apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    sourceSets {
        main {
            jniLibs.srcDir new File(buildDir, 'native-libs')
        }
    }
    defaultConfig {
        applicationId "eu.ensg.forester"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.1'
    testCompile 'junit:junit:4.12'
    compile project(':..:eu.ensg.commons')
    compile project(':..:eu.ensg.spatialite')
    compile project(':..:spatialite-db-driver')
    compile 'com.google.android.gms:play-services:8.4.0'
    compile 'com.google.android.gms:play-services-maps:8.4.0'
    compile 'com.google.android.gms:play-services-ads:8.4.0'
    compile 'com.google.android.gms:play-services-analytics:8.4.0'
}

task copyNativeLibs(type: Copy) {
    from(new File(project(
            ':..:spatialite-db-driver').projectDir,
            'src/main/java/jniLibs')) {
        include 'armeabi/libjsqlite.so'
        include 'armeabi-v7a/libjsqlite.so'
        include 'x86/libjsqlite.so' // for emulator x86
    }
    into new File(buildDir, 'native-libs')
}

// Whenever the code is compiled, also copy the native libs to the build folder
tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }

// On "gradle clean" also reverse the copying of the native libraries
clean.dependsOn 'cleanCopyNativeLibs'
